"""
Django settings for django_riotapi project.

Generated by 'django-admin startproject' using Django 2.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import django_heroku

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'pt4=qd9#iggdbpzarr7@2!mu_(p&6_xeubfsxx-0pha4$cv-*!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'gold_efficiency',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_riotapi.middleware.BasicAuthMiddleware',  # Staging環境向けBasic認証
]

ROOT_URLCONF = 'django_riotapi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_riotapi.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'ja-JP'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

# Herokuデビュー
django_heroku.settings(locals())

# ログレベル設定を環境変数から拾う(環境変数がなかったらDEBUGとする)
DJANGO_LOG_LEVEL = os.getenv('DJANGO_LOG_LEVEL', 'DEBUG')

# logger設定
LOGGING = {
    'version': 1,  # 固定
    'formatters': {  # 出力フォーマットの指定
        'all': {  # 'all'という名前の出力フォーマット定義
            'format': " ".join([
                "%(asctime)s",
                # "%(pathname)s %(funcName)s(%(lineno)d)",
                "%(module)s.%(funcName)s(%(lineno)d)",
                # "%(process)d:%(processName)s",
                # "%(thread)d:%(threadName)s",
                "[%(levelname)s] %(message)s",
            ])
        },
        'simple': {
            'format': "%(levelname)s %(message)s"
        },
    },
    'handlers': {  # ログの出し方の設定
        'file': {  # 'file'という名前のログ出力設定、ファイル書き出し
            'level': 'ERROR',  # ERROR以上のみ(ログ流れ防止目的)。TODO: herokuでファイル書き出しできるか要確認
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'django.log'),
            'formatter': 'all',  # 上で定義した出力フォーマット
        },
        'console': {  # こっちは標準出力書き出し
            'level': 'DEBUG',  # DEBUG以上
            'class': 'logging.StreamHandler',
            'formatter': 'all',
        },
        'file_debug': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'django_debug.log'),
            'formatter': 'all'
        },
    },
    'loggers': {  # どんなloggerがあるかの設定
        'default': {  # 'default'という名前のlogger定義
            'handlers': ['file', 'console'],  # 上で定義したやつ
            'level': DJANGO_LOG_LEVEL,  # どのログレベルから出すか
        },
        'debug': {
            'handlers': ['file_debug', 'console'],
            'level': DJANGO_LOG_LEVEL,
        }
    },
}

# Basic認証用アカウント/パスを環境変数から拾う
BASICAUTH_USERNAME = os.getenv('BASICAUTH_USERNAME')
BASICAUTH_PASSWORD = os.getenv('BASICAUTH_PASSWORD')

# RiotAPIキーを環境変数から拾う
RIOT_API_KEY = os.getenv('RIOT_API_KEY')
