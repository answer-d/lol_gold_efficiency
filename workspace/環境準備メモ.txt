■ あんでぃー環境
# python --version
Python 3.6.4
# python -c "import django; print(django.get_version())"
2.0.3


■ 環境準備方法(ローカル)
# 仮想環境構築
python -m venv <仮想環境パス>
<仮想環境パス>/Scripts/activate

# モジュールインストール(django-bootstrap4はいずれ使う予定)
pip install django
pip install riotwatcher
pip install tqdm
pip install django-heroku

# DB作成(db.sqlite3が作成される)
python manage.py makemigrations
python manage.py migrate

# admin画面用ユーザ作成
python manage.py createsuperuser

# アイテムデータインポート(ローカルのjsonから)
python manage.py updateitems 8.6.1 -f ./gold_efficiency/static/gold_efficiency/json/items_ver.8.6.1_na1.json

# サーバ起動
python manage.py runserver

# http://127.0.0.1:8000/ にアクセス！
# DBの中身見たかったらadmin画面で。http://127.0.0.1:8000/admin/


■ 本番デプロイまでの流れ(Heroku)
・GithubにてmasterへのPRを作成する
  → Review Appが自動作成される、app.jsonで指定した初期化コマンドも実行されてるっぽい

・Review Appで確認後、GithubにてPRを承認する
  → Staging環境へ自動デプロイされる

・ここでStagingのDBマイグレートなどの処理が必要かも(app.jsonには指定してるんだけど、自動で動くのか不明)

・Stagingにて最終確認し、HerokuにてProductionへのpromoteを実行
  → Webブラウザもしくはコマンドで実行可能
     heroku pipelines:promote -a <app name>
  ※ <app name>にはStagingのAPP名を入れる

・ProductionでDBマイグレートなどの処理


■ 環境準備方法(Heroku環境にて自分でAP作成してみたい場合)
ちなみにコマンドでやってることはWebブラウザ経由でもできるよ、Herokuすごい

# Heroku CLIインストール
ドキュメント見てがんばる

# Herokuログイン
heroku login

# アプリケーション作成(StagingとProductionの2つ作る)
heroku create <app name> [-t <team name>]

# アプリケーションの名前変更(オプショナル)
heroku rename <new app name>  [--app <app name>]

# 既存のアプリケーションをリモートリポジトリにする(アプリケーション切替はこれで実施する)
# この手順をやらない場合、各コマンドに「-a <app name>」を付けてAP指定する必要がある
# heroku createしたときは自動で設定されるので実行不要
heroku git:remote -a <app name>

# Postgresアドオン追加(Staging/Production両方やる)
heroku addons:create heroku-postgresql:hobby-dev

  # アプリケーション作成とアドオン追加まとめてできたわ(--addons はカンマ区切りらしい)
  heroku apps:create <app name> [-t <team name>] --addons heroku-postgresql:hobby-dev

# buildpackの明示的な設定(いらない)
#heroku buildpacks:set heroku/python

# パイプライン作成
heroku pipelines:create <pipeline name> -a <staging app name> [-t <team name>]

# パイプラインにProduction環境のAP登録
heroku pipelines:add <pipeline name> -a <prod app name> -s production

# パイプラインにGithub紐付け
heroku pipelines:connect <pipeline name> -r answer-d/lol_gold_efficiency

# Staging環境にオートデプロイ設定
# Review App設定
これらはブラウザでやったZoe

# 上に記載の「本番デプロイまでの流れ」をやる

  #   Herokuでマイグレーション
  heroku run python manage.py migrate

  # アイテムデータインポート(とりあえずローカルのjsonから…)
  heroku run python manage.py updateitems 8.6.1 -f ./gold_efficiency/static/gold_efficiency/json/items_ver.8.6.1_na1.json

# dyno指定(明示的に指定しなくても動いたから実はいらないYO)
heroku ps:scale web=1

# 動作確認
heroku open


■ 直接デプロイしたい場合
Herokuのgitリポジトリのmasterブランチにpushするとデプロイ対象になるんだよ！
自動デプロイも、多分内部的にはgithubのリポジトリをHeroku gitにpullかcloneしてるだけなんじゃないかな？と予想

# ローカルリポジトリでコミット作成(コード変更したら)
git add .
git commit -m

# Heroku gitにpush
git push heroku master

  # ブランチをpushする場合はこっち
  git push heroku <branch name>:master


■ Heroku CLI Reference
https://devcenter.heroku.com/categories/command-line
