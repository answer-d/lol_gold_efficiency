■ あんでぃー環境
# python --version
Python 3.6.4
# python -c "import django; print(django.get_version())"
2.0.3


■ 環境準備方法(ローカル)
# 仮想環境構築
python -m venv <仮想環境パス>
<仮想環境パス>/Scripts/activate

# モジュールインストール(django-bootstrap4はいずれ使う予定)
pip install django
pip install riotwatcher
pip install tqdm
pip install django-heroku

# DB作成(db.sqlite3が作成される)
python manage.py makemigrations
python manage.py migrate

# admin画面用ユーザ作成
python manage.py createsuperuser

# アイテムデータインポート(ローカルのjsonから)
python manage.py updateitems 8.6.1 -f ./gold_efficiency/static/gold_efficiency/json/items_ver.8.6.1_na1.json

# サーバ起動
python manage.py runserver

# http://127.0.0.1:8000/ にアクセス！
# DBの中身見たかったらadmin画面で。http://127.0.0.1:8000/admin/


■ Herokuデプロイ方法
・GithubにてmasterへのPRを作成する
  → Review Appが自動作成される

・GithubにてPRを承認する
  → Staging環境へ自動デプロイされる

・Herokuにてpromoteを実行
  → やり方要確認



■ 環境準備方法(Heroku：自分でAP作成してみたい場合)
# Heroku CLIインストール
Herokuのドキュメント見てがんばる

# Herokuログイン
heroku login

# アプリケーション作成
heroku create <app name>

# アプリケーションの名前変更(オプショナル)
heroku rename <new app name>  [--app <app name>]

# 既存のアプリケーションをリモートリポジトリにする(アプリケーション切替はこれで実施する)
heroku git:remote -a <app name>

# コミット作成(コード変更したら)
git add .
git commit -m "Herokuで動くようにした"

# buildpackの設定(いらない)
#heroku buildpacks:set heroku/python

# Herokuにpush
git push heroku master
# ブランチをpushする場合はこっち
git push heroku <branch name>:master

# Herokuでマイグレーション
heroku run python manage.py migrate

# アイテムデータインポート(とりあえずローカルのjsonから…)
heroku run python manage.py updateitems 8.6.1 -f ./gold_efficiency/static/gold_efficiency/json/items_ver.8.6.1_na1.json

# dyno指定(明示的に指定しなくても動いたから実はいらない)
heroku ps:scale web=1

# 動作確認
heroku open


# オートデプロイ設定



# パイプライン作成

# パイプラインにアプリケーション設定

# Review App設定

